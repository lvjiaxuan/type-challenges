import fs from 'node:fs'
import { expect, it } from 'vitest'

it('for dev', () => {
  const orgReadme = 'https://github.com/type-challenges/type-challenges/blob/main/questions/00004-medium-pick-me/README.mdhttps://github.com/type-challenges/type-challenges/blob/main/questions/00004-easy-pick/README.mdhttps://github.com/type-challenges/type-challenges/blob/main/questions/00043-easy-exclude/README.md'
  // const orgReadme = fs.readFileSync('./README.org.md', { encoding: 'utf-8' })

  const orgMatches = [...orgReadme.matchAll(/questions\/(\d+)-(easy|medium|hard|extreme)-([\w-]+)/g)]

  expect(orgMatches[1]).toMatchInlineSnapshot(`
    [
      "questions/00004-easy-pick",
      "00004",
      "easy",
      "pick",
    ]
  `)

  const groupByLevel = Object.groupBy(orgMatches, (item) => {
    return item[1]
  })

  for (const key in groupByLevel) {
    // @ts-expect-error for dev
    groupByLevel[key] = new Set(groupByLevel[key]?.flatMap(item => item[3]))
  }

  expect(groupByLevel).toMatchInlineSnapshot(`
    {
      "00004": Set {
        "pick-me",
        "pick",
      },
      "00043": Set {
        "exclude",
      },
    }
  `)
})

it('for dev2', () => {
  const localChallenges = {
    easy: fs.readdirSync('./src/easy').map(item => item.match(/easy-([\w-]+)/)![1]),
    medium: fs.readdirSync('./src/medium').map(item => item.match(/medium-([\w-]+)/)![1]),
    hard: fs.readdirSync('./src/hard').map(item => item.match(/hard-([\w-]+)/)![1]),
    extreme: fs.readdirSync('./src/extreme').map(item => item.match(/extreme-([\w-]+)/)![1]),
  }

  expect(localChallenges).toMatchInlineSnapshot(`
    {
      "easy": [
        "hello-world",
        "concat",
        "includes",
        "push",
        "unshift",
        "parameters",
        "pick",
        "readonly",
        "tuple-to-object",
        "first",
        "tuple-length",
        "exclude",
        "awaited",
        "if",
      ],
      "extreme": [
        "readonly-keys",
        "sort",
        "distributeunions",
        "assert-array-index",
        "json-parser",
        "subtract",
        "countreversepairs",
        "parameter-intersection",
        "dynamic-route",
        "query-string-parser",
        "slice",
        "integers-comparator",
        "currying-2",
        "sum",
        "multiply",
        "tag",
        "inclusive-range",
      ],
      "hard": [
        "simple-vue",
        "c-printf-parser",
        "vue-basic-props",
        "isany",
        "typed-get",
        "string-to-number",
        "tuple-filter",
        "tuple-to-enum-object",
        "printf",
        "deep-object-to-unique",
        "length-of-string-2",
        "currying-1",
        "union-to-tuple",
        "string-join",
        "deeppick",
        "pinia",
        "camelize",
        "drop-string",
        "split",
        "classpublickeys",
        "isrequiredkey",
        "objectfromentries",
        "union-to-intersection",
        "ispalindrome",
        "mutable-keys",
        "intersection",
        "binary-to-decimal",
        "object-key-paths",
        "two-sum",
        "validdate",
        "assign",
        "capitalize-nest-object-keys",
        "run-length-encoding",
        "get-required",
        "tree-path-array",
        "maximum",
        "replace-union",
        "fizzbuzz",
        "snakecase",
        "isnegativenumber",
        "optionalundefined",
        "bitwisexor",
        "unbox",
        "binary-addition",
        "get-optional",
        "unique-items",
        "sudoku",
        "length-of-string-3",
        "take-elements",
        "union-to-object-from-key",
        "required-keys",
        "optional-keys",
        "capitalizewords",
        "camelcase",
      ],
      "medium": [
        "return-type",
        "type-lookup",
        "longest-common-prefix",
        "trace",
        "isalphabet",
        "myuppercase",
        "trimleft",
        "trim",
        "capitalize",
        "replace",
        "replaceall",
        "append-argument",
        "permutation",
        "length-of-string",
        "flatten",
        "omit",
        "append-to-object",
        "absolute",
        "string-to-union",
        "merge",
        "kebabcase",
        "diff",
        "anyof",
        "isnever",
        "isunion",
        "replacekeys",
        "readonly-2",
        "remove-index-signature",
        "percentage-parser",
        "drop-char",
        "minusone",
        "pickbytype",
        "startswith",
        "endswith",
        "partialbykeys",
        "requiredbykeys",
        "mutable",
        "deep-readonly",
        "omitbytype",
        "objectentries",
        "shift",
        "tuple-to-nested-object",
        "reverse",
        "flip-arguments",
        "flattendepth",
        "bem-style-string",
        "inordertraversal",
        "flip",
        "tuple-to-union",
        "fibonacci-sequence",
        "nomiwase",
        "greater-than",
        "zip",
        "istuple",
        "chunk",
        "fill",
        "trim-right",
        "without",
        "trunc",
        "chainable-options",
        "indexof",
        "join",
        "lastindexof",
        "unique",
        "maptypes",
        "construct-tuple",
        "number-range",
        "combination",
        "subsequence",
        "firstuniquecharindex",
        "last",
        "get-middle-element",
        "integer",
        "to-primitive",
        "deepmutable",
        "all",
        "filter",
        "checkrepeatedchars",
        "zhao-chu-mu-biao-shu-zu-zhong-zhi-chu-xian-guo-yi-ci-de-yuan-su",
        "zu-he-jian-lei-xing-combination-key-type",
        "replace-first",
        "pop",
        "transpose",
        "json-schema-to-typescript",
        "square",
        "tong-ji-shu-zu-zhong-de-yuan-su-ge-shu",
        "triangular-number",
        "cartesianproduct",
        "mergeall",
        "checkrepeatedtuple",
        "public-type",
        "parse-url-params",
        "promise-all",
        "findall",
        "permutations-of-tuple",
        "extracttoobject",
        "deep-omit",
        "isodd",
        "tower-of-hanoi",
        "pascals-triangle",
        "shitariteraru",
        "compare-array-length",
        "defined-partial-record",
      ],
    }
  `)
})
